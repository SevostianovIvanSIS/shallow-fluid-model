using System;
using System.Collections.Generic;
using Engine.Geometry;
using Engine.Simulation;
using UnityEngine;
using Random = UnityEngine.Random;

namespace Assets.Views.Level.ParticleMap
{
    /// <summary>
    /// Displays an array of moving particles. Particle positions are updated according to velocity field data passed
    /// in from the simulation.
    /// </summary>
    public class ParticleMapView : IDisposable
    {
        private readonly IParticleMapOptions _options;
        private readonly float _radius;

        // The renewal scheduler manages when to "kill" particles and replace them with new ones generated at a random location
        private readonly ParticleRenewalScheduler _renewalScheduler;
        
        // The position updater combines the velocity field generated by the simulation and the current particle positions to 
        // generate new particle positions.
        private readonly ParticlePositionUpdater _positionUpdater;
        
        // The rendering manager displays particles' movement as trails.
        private readonly ParticleRenderingManager _renderingManager;

        private readonly Vector3[] _positions;

        /// <summary>
        /// Construct a particle map for the given simulation geometry.
        /// </summary>
        /// <param name="polyhedron"></param>
        /// <param name="options"></param>
        public ParticleMapView(IPolyhedron polyhedron, IParticleMapOptions options)
        {
            _options = options;
            _radius = (float)_options.Radius;

            _positions = CreateParticles(options.ParticleCount, _radius);

            _renewalScheduler = new ParticleRenewalScheduler(options);
            _positionUpdater = new ParticlePositionUpdater(polyhedron, options);
            _renderingManager = new ParticleRenderingManager(options);
        }

        // Create the specified number of particles at random positions on a sphere of the specified radius.
        private static Vector3[] CreateParticles(int particleCount, float radius)
        {
            var particlePositions = new Vector3[particleCount];
            for (int i = 0; i < particleCount; i++)
            {
                particlePositions[i] = CreateParticle(radius);
            }

            return particlePositions;
        }

        // Create a new particle at a random position on a sphere of the specified radius.
        private static Vector3 CreateParticle(float radius)
        {
            return 1.01f * radius * Random.onUnitSphere;
        }

        /// <summary>
        /// Servant for Unity's Update() function. Moves particles to a new position based on the provided velocity
        /// field, and assigns new positions to particles that have reached the end of their lifespan.
        /// </summary>
        /// <param name="velocity"></param>
        public void Update(VectorField<Vertex> velocity)
        {
            var indicesToRenew = _renewalScheduler.IndicesToBeRenewed();
            RenewOldParticles(indicesToRenew);

            _positionUpdater.Update(_positions, velocity);
            _renderingManager.Update(_positions);
        }

        // Generate new random positions for the specified particles.
        private void RenewOldParticles(IEnumerable<int> indicesToRenew)
        {
            foreach (var i in indicesToRenew)
            {
                var newPosition = CreateParticle(_radius);
                _renderingManager.Reset(i, newPosition);
                _positions[i] = newPosition;
            }
        }

        #region Destruction methods
        /// <summary>
        /// Destroy the game objects that render the particle map.
        /// </summary>
        public void Dispose()
        {
            _renderingManager.Dispose();
        }

        #endregion
    }
}
